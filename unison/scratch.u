map : (a -> b) -> NonEmptyList a -> NonEmptyList b
map f xs = match xs with
  NonEmptyList x xs_ -> NonEmptyList (f x) (.base.List.map f xs_)

test> map.tests.prop1 = runs 100 'let
  x = !(natIn 0 1000)
  xs = !(listOf (natIn 0 100))
  nE = .fromList x xs
  f = (+) 1
  expect (map f nE == (.fromList (f x) (.base.List.map f xs)))

size : NonEmptyList a -> .base.Nat
size xs =
  match xs with
    NonEmptyList x xs_ -> 1 + (.base.List.size xs_)

test> size.tests.prop1 = runs 100 'let
    x = !(natIn 0 1000)
    xs = !(listOf (natIn 0 100))
    nE = .fromList x xs
    expect (size nE == (base.List.size xs + 1))
  
rest : NonEmptyList a -> [a]
rest xs =
  match xs with
    NonEmptyList x xs_ -> xs_

test> rest.tests.prop1 = runs 100 'let
  x = !(natIn 0 1000)
  xs = !(listOf (natIn 0 100))
  nE = .fromList x xs
  expect (rest nE == xs)

append : NonEmptyList a -> NonEmptyList a -> NonEmptyList a
append xs ys =
  fromList (fst xs) (rest xs ++ [fst ys] ++ (rest ys))

tet> append.tests.prop1 = runs 100 'let
  x = !(natIn 0 1000)
  xs = !(listOf (natIn 0 100))
  nE = .fromList x xs
  y = !(natIn 0 1000)
  ys = !(listOf (natIn 0 100))
  nE2 = .fromList y ys
  expect (size (append nE nE2) == (size nE .base.Nat.+ size nE2))

---- Anything below this line is ignored by Unison.

type NonEmptyList a = NonEmptyList a [a]

fromList : a -> [a] -> NonEmptyList a
fromList x xs = NonEmptyList x xs

fst : NonEmptyList a -> a
fst xs =
  match xs with
    NonEmptyList.NonEmptyList x ys -> x

use test

test> fst.tests.prop1 =
  go _ = a = !nat
         b = !nat
         expect (fst (fromList a [b]) == a)
  runs 100 go

